# https://projecteuler.net/problem=35

potentials = Enumerator.new do |y|
  1.upto 9 do |a|
    y << [a] # emit first b/c 2, as a single digit, is valid
    next if a % 2 == 0
    1.upto 9 do |b|
      next if b % 2 == 0
      y << [a, b]
      1.upto 9 do |c|
        next if c % 2 == 0
        y << [a, b, c]
        1.upto 9 do |d|
          next if d % 2 == 0
          y << [a, b, c, d]
          1.upto 9 do |e|
            next if e % 2 == 0
            y << [a, b, c, d, e]
            1.upto 9 do |f|
              next if f % 2 == 0
              y << [a, b, c, d, e, f]
            end
          end
        end
      end
    end
  end
end

require 'prime'
def circular?(digits)
  digits.each_index.all? do |i|
    digits.rotate(i).join.to_i.prime?
  end
end

potentials                    # => #<Enumerator: #<Enumerator::Generator:0x00007fbf190e9f18>:each>
  .select { |d| circular? d } # => [[1, 1], [1, 1, 3], [1, 1, 9, 3], [1, 1, 9, 3, 9], [1, 3], [1, 3, 1], [1, 7], [1, 9, 3, 1], [1, 9, 3, 9, 1], [1, 9, 3, 9, 3, 9], [1, 9, 7], [1, 9, 9], [1, 9, 9, 3, 7], [1, 9, 9, 9, 3, 3], [2], [3], [3, 1], [3, 1, 1], [3, 1, 1, 9], [3, 1, 9, 9, 9, 3], [3, 3, 1, 9, 9, 9], [3, 3, 7], [3, 7], [3, 7, 1, 9, 9], [3, 7, 3], [3, 7, 7, 9], [3, 9, 1, 1, 9], [3, 9, 1, 9, 3, 9], [3, 9, 3, 9, 1, 9], [5], [7], [7, 1], [7, 1, 9], [7, 1, 9, 9, 3], [7, 3], [7, 3, 3], [7, 7, 9, 3], [7, 9], [7, 9, 3, 7], [9, 1, 1, 9, 3], [9, 1, 9], [9, 1, 9, 3, 9, 3], [9, 3, 1, 1], [9, 3, 3, 1, 9, 9], [9, 3, 7, 1, 9], [9, 3, 7, 7], [9, 3, 9, 1, 1], [9, 3, 9, 1, 9, 3], [9, 3, 9, 3, 9, 1], [9, 7], [9, 7, 1], [9, 9, 1], [9, 9, 3, 3, 1, 9], [9, 9, 3, 7, 1], [9, 9, 9, 3, 3, 1]]
  .map { |d| d.join.to_i }    # => [11, 113, 1193, 11939, 13, 131, 17, 1931, 19391, 193939, 197, 199, 19937, 199933, 2, 3, 31, 311, 3119, 319993, 331999, 337, 37, 37199, 373, 3779, 39119, 391939, 393919, 5, 7, 71, 719, 71993, 73, 733, 7793, 79, 7937, 91193, 919, 919393, 9311, 933199, 93719, 9377, 93911, 939193, 939391, 97, 971, 991, 993319, 99371, 999331]
  .sort                       # => [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 197, 199, 311, 337, 373, 719, 733, 919, 971, 991, 1193, 1931, 3119, 3779, 7793, 7937, 9311, 9377, 11939, 19391, 19937, 37199, 39119, 71993, 91193, 93719, 93911, 99371, 193939, 199933, 319993, 331999, 391939, 393919, 919393, 933199, 939193, 939391, 993319, 999331]
  .count                      # => 55
